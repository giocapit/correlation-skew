#include "Basket.hpp"
#include "BasketOption.hpp"
#include "MCOptionPricer.hpp"
#include "ProcessBiVariateJumpDiffusion.hpp"
#include "VolSurfaceSkew.hpp"
#include <iostream>


void testUpdateCumulatedPayoff()
{

	double strikestmp[] = {0.70,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.80,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.90,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1.00,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.10,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.20,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.30};
	vector<double> strikes(61);
	double volstmp1[] = {0.551667129805954,0.548415034016701,0.545017325430446,0.541480608124739,0.537812921058473,0.534021905031957,0.530112530187596,0.526096929062114,0.521981360930876,0.517774179069154,0.513483852748598,0.509118706236397,0.504687299330461,0.500198070298309,0.495659414779253,0.491079655385440,0.486467011936551,0.481830264877897,0.477174677539282,0.472511590230226,0.467846697634813,0.463187381958073,0.458540713325116,0.453913445169713,0.449312006110759,0.444742489554838,0.440210641588105,0.435721538642081,0.431281560637484,0.426893166692626,0.422562573868635,0.418293031370570,0.414087121129350,0.409947768369450,0.405880965120510,0.401885883882894,0.397964958529298,0.394121026375046,0.390355808422839,0.386667713721442,0.383059741435225,0.379533313603938,0.376086751445829,0.372720725078259,0.369434990379503,0.366229031479307,0.363104017619025,0.360055548977539,0.357085679223937,0.354192543253945,0.351375002194755,0.348631817392919,0.345961666331551,0.343362979034206,0.340834436369105,0.338374384302475,0.335983174124519,0.333655200237757,0.331392081519540,0.329191104713087,0.327050792953120};
	vector<double> vols1(61);
	double volstmp2[] = {0.961946438778983,0.957084532218848,0.952166140688809,0.947195753439515,0.942177721549349,0.937116263832301,0.932015472806886,0.926879320475312,0.921711663747684,0.916516274927167,0.911296719194747,0.906056615998896,0.900799384264348,0.895528371462266,0.890246830422694,0.884957921382353,0.879664713766862,0.874370187725022,0.869077235433149,0.863788662187737,0.858507187304906,0.853235444845157,0.847975984181771,0.842731270430931,0.837503684761118,0.832295524598800,0.827109003746750,0.821946252430625,0.816809317280327,0.811700156452770,0.806620628373277,0.801572497817794,0.796557437458954,0.791577028123329,0.786632600989483,0.781725803146465,0.776858012282417,0.772030503295407,0.767244460549038,0.762500976559467,0.757801064461366,0.753145668564170,0.748535663704730,0.743971854658595,0.739454975990050,0.734985692353498,0.730564599257976,0.726192224300411,0.721869028860969,0.717596075153686,0.713372182980432,0.709198188800545,0.705075087005754,0.701002567687923,0.696980747927775,0.693009695486200,0.689089431519599,0.685219933643272,0.681401139490030,0.677632941589242,0.673915172122650};
	vector<double> vols2(61);
	int dimSkew = 61;
	int Nsim=1000000;

	for (int i=0; i<61 ; i++)
	{
		vols1[i]=volstmp1[i];
		vols2[i]=volstmp2[i];
		strikes[i]= strikestmp[i];
	}

	VolSurfaceSkew skew1 = VolSurfaceSkew(strikes,vols1);
	Equity stock1 = Equity (150.0,&skew1);

	VolSurfaceSkew skew2 = VolSurfaceSkew(strikes,vols2);
	Equity stock2 = Equity (200.0,&skew2);
	Basket basket = Basket(&stock1,&stock2,0.3,0.7);
	ProcessBiVariateJumpDiffusion p = ProcessBiVariateJumpDiffusion(0.3 ,
			0.4,
			0.2,
			0.5,
			0.2,
			0.3,
			0.5,
			Nsim);
	BasketOption *basketOptions = new BasketOption[dimSkew];
	MCOptionPricer *pricers = new MCOptionPricer[dimSkew];
	for (int i = 0; i < dimSkew; i++)
	{
		basketOptions[i] = BasketOption(1, &basket, strikes[i], BasketOption::call);
		pricers[i] = MCOptionPricer(&basketOptions[i], &p, 0.03, Nsim);
	}

	for (int j = 0; j < Nsim; j++)
	{
		p.generaCammino(1);
		for (int i = 0; i < dimSkew; i++)
		{
			pricers[i].updateCumulatedPayoff();
		}
		p.increaseContatore();

	}

	double *optionPrices = new double[dimSkew];

	for (int i = 0; i < dimSkew; i++)
	{
		optionPrices[i] = pricers[i].getOptionPriceFromCumulatedPayoff();
		cout << optionPrices[i] << " ";
	}
	delete [] basketOptions;
	delete [] pricers;
	delete [] optionPrices;
}

int main()
{
	testUpdateCumulatedPayoff();
	return 0 ;
}
