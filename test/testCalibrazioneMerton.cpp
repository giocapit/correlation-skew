#include "ProcessJumpDiffusion.cpp"
#include <vector>
#include <iostream>

using namespace std;
void testCalibrazioneMerton(void)
{
	double strikestmp[] = {0.70,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.80,0.81,0.82,0.83,0.84,0.85,0.86,0.87,0.88,0.89,0.90,0.91,0.92,0.93,0.94,0.95,0.96,0.97,0.98,0.99,1.00,1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.10,1.11,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.20,1.21,1.22,1.23,1.24,1.25,1.26,1.27,1.28,1.29,1.30};
	vector<double> strikes(61);
	double volstmp[] = {0.551667129805954,0.548415034016701,0.545017325430446,0.541480608124739,0.537812921058473,0.534021905031957,0.530112530187596,0.526096929062114,0.521981360930876,0.517774179069154,0.513483852748598,0.509118706236397,0.504687299330461,0.500198070298309,0.495659414779253,0.491079655385440,0.486467011936551,0.481830264877897,0.477174677539282,0.472511590230226,0.467846697634813,0.463187381958073,0.458540713325116,0.453913445169713,0.449312006110759,0.444742489554838,0.440210641588105,0.435721538642081,0.431281560637484,0.426893166692626,0.422562573868635,0.418293031370570,0.414087121129350,0.409947768369450,0.405880965120510,0.401885883882894,0.397964958529298,0.394121026375046,0.390355808422839,0.386667713721442,0.383059741435225,0.379533313603938,0.376086751445829,0.372720725078259,0.369434990379503,0.366229031479307,0.363104017619025,0.360055548977539,0.357085679223937,0.354192543253945,0.351375002194755,0.348631817392919,0.345961666331551,0.343362979034206,0.340834436369105,0.338374384302475,0.335983174124519,0.333655200237757,0.331392081519540,0.329191104713087,0.327050792953120};
	vector<double> vols(61);

	for (int i=0; i<61 ; i++)
	{
		vols[i]=volstmp[i];
		strikes[i]= strikestmp[i];
	}

	VolSurfaceSkew skew = VolSurfaceSkew(strikes,vols);
	Equity stock = Equity (150.0,&skew);
	
	ProcessJumpDiffusion process = ProcessJumpDiffusion(0.3,0.2,0.1);
	process.calibra(stock, 0.03, 1.0);

       	//double *pars = process.getParameters();
	double lambda = process.getLambda();
        double J = process.getJ();
	double sigma = process.getSigma();	
	std::cout << lambda << "\n" << J << "\n" << sigma << "\n"; 
}

int main()
{
	testCalibrazioneMerton();
	return 0;
}
